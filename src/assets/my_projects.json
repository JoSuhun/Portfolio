{
  "StellAR": {
    "title": "StellAR",
    "theme_color": "#541D7A",
    "image": [
      "/img/project/stellAR_main.png",
      "/img/project/stellAR_AR.gif",
      "/img/project/stellAR_constellation.gif",
      "/img/project/stellAR_card.gif",
      "/img/project/stellAR_time.gif"
    ],
    "intro": {
      "date": "2024. 04. 08. ~ 2024. 05. 20.",
      "summary": "증강현실(AR)과 3D맵을 활용한 별자리 앱 서비스",
      "background": "빛 공해로 인해 보이지 않는 별들을 휴대폰과 스크린을 통해 보여주고, 별자리를 직접 만들어보는 체험을 제공하기 위함"
    },
    "link": {
      "github": "https://github.com/JoSuhun/StellAR",
      "notion": "https://www.notion.so/SSAFY-C105-StellAR-5f713f4f6266461ea42d7d83256d03c0?pvs=4https://www.notion.so/SSAFY-C105-StellAR-5f713f4f6266461ea42d7d83256d03c0?pvs=4"
    },
    "skill": [
      "TypeScript",
      "Node.js",
      "vite",
      "React",
      "zustand",
      "react query",
      "Three.js",
      "PWA"
    ],
    "task": [
      ["UI/UX 설계"],
      [
        "Raycasting 기법을 통한 3D 맵 화면 이동",
        "카메라 위치가 구 형태의 맵 중앙을 중심으로 자연스럽게 이동하도록 구현",
        "비디오 스트림과 자이로 센서를 이용한 AR 구현"
      ],
      [
        "GLTF 모델을 사용한 별과 행성 표현",
        "GLTF 형식의 3D 모델을 객체에 적용, 입체감 및 사실감 확보"
      ],
      [
        "실시간 3d  메쉬 생성",
        "별 객체 클릭 이벤트에 따라 실시간으로 3d 메쉬가 생성되도록 구현"
      ],
      [
        "Camera Positioning을 이용한 Zoom in/out 기능",
        "객체 클릭 시 카메라 위치 및 타겟 좌표를 변경하여 줌인/줌아웃 구현"
      ],
      [
        "ESLint를 통한 코드 규칙 정의 및 문제 식별",
        "한 사람이 작성한 듯한 코드 통일성을 위해, Javascript 및 Typescript 코드 규칙 정의",
        "코드에서 발견되는 문제되는 패턴들을 식별"
      ],
      [
        "반응형 디자인",
        "웹, 태블릿, 모바일의 3가지 환경에서 자연스럽게 이용할 수 있도록 반응형으로 디자인"
      ],
      [
        "카카오페이 결제",
        "빔 프로젝터 기기 구매를 위한 카카오페이 결제 기능 구현"
      ]
    ],
    "review": [
      [
        "React 컴포넌트의 위치에 따른 리렌더링 오류 해결",
        "상위 컴포넌트가 리렌더링될 때마다 자녀 컴포넌트도 함께 리렌더링 되는 리액트의 렌더링 메커니즘으로, MainCanvas 함수 컴포넌트가 렌더링될 때 내부에 정의된 다른 로직들로 인해 BackGroundStars 컴포넌트 또한 불필요하게 여러번 렌더링 되는 문제를 파악.",
        "문제가 되는 컴포넌트를 상위 컴포넌트 외부에 정의하여, 해당 컴포넌트를 불필요하게 리렌더링 시키지 않고 활용하여 문제 해결."
      ],
      [
        "GPU DrawCall 최적화",
        "약 1100개의 별 정보 데이터(별 이름, 위치[x, y, z], 색상)를 받아와 이를 각 단일 mesh로 구현하여 3D 상에 렌더링 하는 과정에서 화면이 자연스럽게 구현되지 못함. CPU가 GPU에 명령을 보내는 횟수인 DrawCall이 문제임을 파악.",
        "인스턴싱을 사용하여 동일한 Geometry와 Material을 공유하는 객체들을 한 번에 렌더링, 결과적으로 DrawCall의 수를 줄여 문제 해결."
      ]
    ]
  },
  "너에게, 로그인": {
    "title": "너에게, 로그인",
    "theme_color": "#FF59AF",
    "image": [
      "/img/project/Neoro_main.png",
      "/img/project/Neoro_diary.gif",
      "/img/project/Neoro_chat.png",
      "/img/project/Neoro_calendar.png"
    ],
    "intro": {
      "date": "2024. 01. 03. ~ 2024. 02. 16.",
      "summary": "WebRTC 기술 기반의 원격 사진 촬영 다이어리 SNS",
      "background": "서로를 잘 모르거나, 원거리로 자주 만나지 못하는 커플들을 위한 교류 애플리케이션의 필요성의 대두"
    },
    "link": {
      "github": "https://github.com/JoSuhun/LoginToYou",
      "notion": "https://www.notion.so/SSAFY-C105-b66fda469031406dbba5a4e9704c900d?pvs=4"
    },
    "skill": [
      "TypeScript",
      "Node.js",
      "vite",
      "React",
      "zustand",
      "WebRTC",
      "PWA"
    ],
    "task": [
      ["UI/UX 설계", "모바일 환경에 최적화된 앱 디자인"],
      [
        "full-calendar 라이브러리 사용",
        "모바일 환경과 UI/UX를 통일하기 위하여 커스텀",
        "상대방 사용자가 등록한 일정을 실시간으로 공유"
      ],
      ["실시간 영상 통화 기능", "open-vidu 활용한 WebRTC 영상통화 구현"],
      [
        "푸시 알림 기능",
        "firebase FCM을 사용한 푸시 알림 구현",
        "오늘의 질문, 다이어리, 영상 통화 등이 기능에서 상대방 사용자의 기기에 알람을 보낼 수 있도록 구현"
      ]
    ],
    "review": [
      [
        "React FormData 생성 및 Axios 요청",
        "사용자 프로필 이미지를 등록 및 수정할 때, 서버로 이미지 파일을 보내야 했음.",
        "보통의 JSON 형식이 아닌, headers에 Content-Type을 명시하고 FormData를 사용하여 이미지 파일을 서버로 전송하고, 여러 개의 필드로 멀티파트 데이터 전송."
      ],
      [
        "Axios POST 요청 params 오류",
        "서버의 엔드포인트가 데이터를 쿼리 스트링으로 수신하도록 설계된 반면, 클라이언트 코드에서 데이터를 요청 본문 data로 전송하여 문제 발생.",
        "데이터 형식이 일치하지 않아 발생한 문제임을 파악하고, params 속성을 사용하여 쿼리 스트링으로 데이터를 전송함으로써 문제 해결. API 문서를 명확히 이해하고, 코드 리뷰를 적극적으로 하게 됨."
      ]
    ]
  },
  "Neureka": {
    "title": "Neureka",
    "theme_color": "#3A4CA8",
    "image": [
      "/img/project/Neureka_main.gif",
      "/img/project/Neureka_all.gif",
      "/img/project/Neureka_detail.gif",
      "/img/project/Neureka_bookmark.gif"
    ],
    "intro": {
      "date": "2024. 02. 26. ~ 2024. 04. 05.",
      "summary": "빅데이터 알고리즘을 기반으로 한 증권 테마 뉴스 추천 서비스",
      "background": "개인 투자자가 늘어나고 있는 가운데, 사용자 맞춤 기사를 모아볼 수 있는 서비스 제공"
    },
    "link": {
      "github": "https://github.com/JoSuhun/Neureka",
      "notion": "https://www.notion.so/SSAFY-C105-NEureka-9df1c4ca20e5484ea951bb89593eac87?pvs=4"
    },
    "skill": ["TypeScript", "Node.js", "vite", "React", "Jotai", "react-query"],
    "task": [
      ["UI/UX 설계"],
      [
        "사용자 JWT 토큰 관리",
        "회원가입 및 로그인 시 사용자 JWT 토큰 저장 및 조회",
        "JWT 토큰 만료 시 로그아웃 처리 후 로그인 페이지로 유도"
      ],
      [
        "뉴스 기사 전체 조회 시 페이지네이션 및 검색 기능",
        "불러온 기사를 페이지네이션을 이용하여 설계 및 검색어 필터링",
        "사용자들이 검색한 단어저장하여, 실시간으로 적용되는 인기 검색어 구현"
      ],
      [
        "경제 용어 사전 및 북마크 기능",
        "경제 용어 사전에서 어려운 단어를 모아볼 수 있는 북마크 기능",
        "기사 상세 페이지에서 바로 이용할 수 있도록 해당 컴포넌트 재사용"
      ],
      [
        "ESLint를 통한 코드 규칙 정의 및 문제 식별",
        "한 사람이 작성한 듯한 코드 통일성을 위해, Typescript 코드 규칙 정의",
        "코드에서 발견되는 문제되는 패턴들을 식별"
      ]
    ],
    "review": [
      [
        "React jwt-decode 를 활용한 JWT Token 디코딩",
        "만료된 토큰을 사용하여 API 요청을 보내 서버로부터 오류(401 Unauthorized)를 유발. JWT 토큰은 자체적으로 만료 시간을 포함하고 있지만, 이를 확인하지 못하여 생긴 오류였음.",
        "jwt-decode 라이브러리를 사용하여 JWT 토큰을 디코딩하고, 만료 시간을 확인. 만료된 토큰을 사용할 경우 사용자를 로그아웃시키거나 토큰을 갱신하도록 구현하여 문제 해결."
      ]
    ]
  }
}
